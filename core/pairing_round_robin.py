from typing import List, Tuple, Optional

#from core.utils import root_logger
#from core.player import Player
#from core.constants import W, B
#from core.exceptions import PairingException


# test toy player for isolated testing as just a module
class Player:
    """Represents a player in the tournament."""

    def __init__(self, name: str) -> None:
        self.name: str = name

    def __str__(self):
        return name


'''fide handbook
Berger Tables for Round-Robin Tournaments

Where there is an odd number of players, the highest number counts as a bye.

3 or 4 players:
Rd 1: 1-4, 2-3.
Rd 2: 4-3, 1-2.
Rd 3: 2-4, 3-1.

5 or 6 players:
Rd 1: 1-6, 2-5, 3-4.
Rd 2: 6-4, 5-3, 1-2.
Rd 3: 2-6, 3-1, 4-5.
Rd 4: 6-5, 1-4, 2-3.
Rd 5: 3-6, 4-2, 5-1.

7 or 8 players:
Rd 1: 1-8, 2-7, 3-6, 4-5.
Rd 2: 8-5, 6-4, 7-3, 1-2.
Rd 3: 2-8, 3-1, 4-7, 5-6.
Rd 4: 8-6, 7-5, 1-4, 2-3.
Rd 5: 3-8, 4-2, 5-1, 6-7.
Rd 6: 8-7, 1-6, 2-5, 3-4.
Rd 7: 4-8, 5-3, 6-2, 7-1.

9 or 10 players:
Rd 1: 1-10, 2-9, 3-8, 4-7, 5-6.
Rd 2: 10-6, 7-5, 8-4, 9-3, 1-2.
Rd 3: 2-10, 3-1, 4-9, 5-8, 6-7.
Rd 4: 10-7, 8-6, 9-5, 1-4, 2-3.
Rd 5: 3-10, 4-2, 5-1, 6-9, 7-8.
Rd 6: 10-8, 9-7, 1-6, 2-5, 3-4.
Rd 7: 4-10, 5-3, 6-2, 7-1, 8-9.
Rd 8: 10-9, 1-8, 2-7, 3-6, 4-5.
Rd 9: 5-10, 6-4, 7-3, 8-2, 9-1.

11 or 12 players:
Rd 1: 1-12, 2-11, 3-10, 4-9, 5-8, 6-7.
Rd 2: 12-7, 8-6, 9-5, 10-4, 11-3, 1-2.
Rd 3: 2-12, 3-1, 4-11, 5-10, 6-9, 7-8.
Rd 4: 12-8, 9-7, 10-6, 11-5, 1-4, 2-3.
Rd 5: 3-12, 4-2, 5-1, 6-11, 7-10, 8-9.
Rd 6: 12-9, 10-8, 11-7, 1-6, 2-5, 3-4.
Rd 7: 4-12, 5-3, 6-2, 7-1, 8-11, 9-10.
Rd 8: 12-10, 11-9, 1-8, 2-7, 3-6, 4-5.
Rd 9: 5-12, 6-4, 7-3, 8-2, 9-1, 10-11.
Rd 10: 12-11, 1-10, 2-9, 3-8, 4-7, 5-6.
Rd 11: 6-12, 7-5, 8-4, 9-3, 10-2, 11-1.

13 or 14 players:
Rd 1: 1-14, 2-13, 3-12, 4-11, 5-10, 6-9, 7-8
Rd 2: 14-8, 9-7, 10-6, 11-5, 12-4, 13-3, 1-2
Rd 3: 2-14, 3-1, 4-13, 5-12, 6-11, 7-10, 8-9
Rd 4: 14-9, 10-8, 11-7, 12-6, 13-5, 1-4, 2-3
Rd 5: 3-14, 4-2, 5-1, 6-13, 7-12, 8-11, 9-10
Rd 6: 14-10, 11-9, 12-8, 13-7, 1-6, 2-5, 3-4
Rd 7: 4-14, 5-3, 6-2, 7-1, 8-13, 9-12, 10-11
Rd 8: 14-11, 12-10, 13-9, 1-8, 2-7, 3-6, 4-5
Rd 9: 5-14, 6-4, 7-3, 8-2, 9-1, 10-13, 11-12
Rd 10: 14-12, 13-11, 1-10, 2-9. 3-8, 4-7, 5-6
Rd 11: 6-14, 7-5, 8-4, 9-3, 10-2, 11-1, 12-13
Rd 12: 14-13, 1-12, 2-11, 3-10, 4-9, 5-8, 6-7
Rd 13: 7-14, 8-6, 9-5, 10-4, 11-3, 12-2, 13-1

15 or 16 players:
Rd 1: 1-16, 2-15, 3-14, 4-13, 5-12, 6-11, 7-10, 8-9.
Rd 2: 16-9, 10-8, 11-7, 12-6, 13-5, 14-4, 15-3, 1-2.
Rd 3: 2-16, 3-1, 4-15, 5-14, 6-13, 7-12, 8-11, 9-10.
Rd 4: 16-10, 11-9, 12-8, 13-7, 14-6, 15-5, 1-4, 2-3.
Rd 5: 3-16, 4-2, 5-1, 6-15, 7-14, 8-13, 9-12, 10-11.
Rd 6: 16-11, 12-10, 13-9, 14-8, 15-7, 1-6, 2-5, 3-4.
Rd 7: 4-16, 5-3, 6-2, 7-1, 8-15, 9-14, 10-13, 11-12.
Rd 8: 16-12, 13-11, 14-10, 15-9, 1-8, 2-7, 3-6, 4-5.
Rd 9: 5-16, 6-4, 7-3, 8-2, 9-1, 10-15, 11-14, 12-13.
Rd 10: 16-13, 14-12, 15-11, 1-10, 2-9, 3-8, 4-7, 5-6.
Rd 11: 6-16, 7-5, 8-4, 9-3, 10-2, 11-1, 12-15, 13-14.
Rd 12: 16-14, 15-13, 1-12, 2-11, 3-10, 4-9, 5-8, 6-7.
Rd 13: 7-16, 8-6, 9-5, 10-4, 11-3, 12-2, 13-1, 14-15.
Rd 14: 16-15, 1-14, 2-13, 3-12, 4-11, 5-10, 6-9, 7-8.
Rd 15: 8-16, 9-7, 10-6, 11-5, 12-4, 13-3, 14-2, 15-1.

For a double-round tournament it is recommended to reverse the order of the last two rounds of the first cycle. This is to avoid three consecutive games with the same colour.
'''

BERGER_TABLES = {
    "3-4": (
        ((1, 4), (2, 3)),
        ((4, 3), (1, 2)),
        ((2, 4), (3, 2)),
    ),
    "5-6": (
        ((1, 6), (2, 5), (3, 4)),
        ((6, 4), (5, 3), (1, 2)),
        ((2, 6), (3, 1), (4, 5)),
        ((6, 5), (1, 4), (2, 3)),
        ((3, 6), (4, 2), (5, 1)),
    ),
    "7-8": (
        ((1, 8), (2, 7), (3, 6), (4, 5)),
        ((8, 5), (6, 4), (7, 3), (1, 2)),
        ((2, 8), (3, 1), (4, 7), (5, 6)),
        ((8, 6), (7, 5), (1, 4), (2, 3)),
        ((3, 8), (4, 2), (5, 1), (6, 7)),
        ((8, 7), (1, 6), (2, 5), (3, 4)),
        ((4, 8), (5, 3), (6, 2), (7, 1)),
    ),
    "9-10": (
        ((1, 8), (2, 7), (3, 6), (4, 5)),
        ((8, 5), (6, 4), (7, 3), (1, 2)),
        ((2, 8), (3, 1), (4, 7), (5, 6)),
        ((8, 6), (7, 5), (1, 4), (2, 3)),
        ((3, 8), (4, 2), (5, 1), (6, 7)),
        ((8, 7), (1, 6), (2, 5), (3, 4)),
        ((4, 8), (5, 3), (6, 2), (7, 1)),
    ),
    "11-12": (
        ((1, 12), (2, 11), (3, 10), (4, 9), (5, 8), (6, 7)),
        ((12, 7), (8, 6), (9, 5), (10, 4), (11, 3), (1, 2)),
        ((2, 12), (3, 1), (4, 11), (5, 10), (6, 9), (7, 8)),
        ((12, 8), (9, 7), (10, 6), (11, 5), (1, 4), (2, 3)),
        ((3, 12), (4, 2), (5, 1), (6, 11), (7, 10), (8, 9)),
        ((12, 9), (10, 8), (11, 7), (1, 6), (2, 5), (3, 4)),
        ((4, 12), (5, 3), (6, 2), (7, 1), (8, 11), (9, 10)),
        ((12, 10), (11, 9), (1, 8), (2, 7), (3, 6), (4, 5)),
        ((5, 12), (6, 4), (7, 3), (8, 2), (9, 1), (10, 11)),
        ((12, 11), (1, 10), (2, 9), (3, 8), (4, 7), (5, 6)),
        ((6, 12), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)),
    ),
    "13-14": (
        ((1, 14), (2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)),
        ((14, 8), (9, 7), (10, 6), (11, 5), (12, 4), (13, 3), (1, 2)),
        ((2, 14), (3, 1), (4, 13), (5, 12), (6, 11), (7, 10), (8, 9)),
        ((14, 9), (10, 8), (11, 7), (12, 6), (13, 5), (1, 4), (2, 3)),
        ((3, 14), (4, 2), (5, 1), (6, 13), (7, 12), (8, 11), (9, 10)),
        ((14, 10), (11, 9), (12, 8), (13, 7), (1, 6), (2, 5), (3, 4)),
        ((4, 14), (5, 3), (6, 2), (7, 1), (8, 13), (9, 12), (10, 11)),
        ((14, 11), (12, 10), (13, 9), (1, 8), (2, 7), (3, 6), (4, 5)),
        ((5, 14), (6, 4), (7, 3), (8, 2), (9, 1), (10, 13), (11, 12)),
        ((14, 12), (13, 11), (1, 10), (2, 9), (3, 8), (4, 7), (5, 6)),
        ((6, 14), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 13)),
        ((14, 13), (1, 12), (2, 11), (3, 10), (4, 9), (5, 8), (6, 7)),
        ((7, 14), (8, 6), (9, 5), (10, 4), (11, 3), (12, 2), (13, 1)),
    ),
    "15-16": (
        ((1, 16), (2, 15), (3, 14), (4, 13), (5, 12), (6, 11), (7, 10), (8,
                                                                         9)),
        ((16, 9), (10, 8), (11, 7), (12, 6), (13, 5), (14, 4), (15, 3), (1,
                                                                         2)),
        ((2, 16), (3, 1), (4, 15), (5, 14), (6, 13), (7, 12), (8, 11), (9,
                                                                        10)),
        ((16, 10), (11, 9), (12, 8), (13, 7), (14, 6), (15, 5), (1, 4), (2,
                                                                         3)),
        ((3, 16), (4, 2), (5, 1), (6, 15), (7, 14), (8, 13), (9, 12), (10,
                                                                       11)),
        ((16, 11), (12, 10), (13, 9), (14, 8), (15, 7), (1, 6), (2, 5), (3,
                                                                         4)),
        ((4, 16), (5, 3), (6, 2), (7, 1), (8, 15), (9, 14), (10, 13), (11,
                                                                       12)),
        ((16, 12), (13, 11), (14, 10), (15, 9), (1, 8), (2, 7), (3, 6), (4,
                                                                         5)),
        ((5, 16), (6, 4), (7, 3), (8, 2), (9, 1), (10, 15), (11, 14), (12,
                                                                       13)),
        ((16, 13), (14, 12), (15, 11), (1, 10), (2, 9), (3, 8), (4, 7), (5,
                                                                         6)),
        ((6, 16), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 15), (13,
                                                                       14)),
        ((16, 14), (15, 13), (1, 12), (2, 11), (3, 10), (4, 9), (5, 8), (6,
                                                                         7)),
        ((7, 16), (8, 6), (9, 5), (10, 4), (11, 3), (12, 2), (13, 1), (14,
                                                                       15)),
        ((16, 15), (1, 14), (2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7,
                                                                         8)),
        ((8, 16), (9, 7), (10, 6), (11, 5), (12, 4), (13, 3), (14, 2), (15,
                                                                        1)),
    ),
}

print((BERGER_TABLES["3-4"]))


class RoundRobin(self):
    """A round robin chess tournament"""
    self.players: tuple[Player, ...]
    self.round_num: int
    self.b_table: Tuple

    def __init__(self, players: List[Player]) -> None:
        n_players = len(players)

        if (n_players > 16 or n_players < 3):
            root_logger.error(
                "Tried to pair round robin with invalid n_players: %s",
                n_players)
            raise PairingException(
                ("Can not pair a round robin with n=%s players, " +
                 "n must be less than 17 and more than 3."), n_players)

        # we know n_players is < 16 and > 3, so this will
        # set the berger table to the correct val by starting from the top
        # and decending
        if (n_players > 14):
            self.b_table = BERGER_TABLES["16-15"]
            root_logger.info("round robin created for 15-16 players")
        elif (n_players > 12):
            self.b_table = BERGER_TABLES["13-14"]
            root_logger.info("round robin created for 13-14 players")
        elif (n_players > 10):
            self.b_table = BERGER_TABLES["11-12"]
            root_logger.info("round robin created for 11-12 players")
        elif (n_players > 8):
            self.b_table = BERGER_TABLES["9-10"]
            root_logger.info("round robin created for 9-10 players")
        elif (n_players > 6):
            self.b_table = BERGER_TABLES["7-8"]
            root_logger.info("round robin created for 7-8 players")
        elif (n_players > 6):
            self.b_table = BERGER_TABLES["5-6"]
            root_logger.info("round robin created for 5-6 players")
        else:
            self.b_table = BERGER_TABLES["3-4"]
            root_logger.info("round robin created for 3-4 players")

        self.round_num = 1
        # we transform the list of players into an immutable tuple.
        # The order must be kept constant as the Berger tables require it.
        self.players = tuple(players)

    def _pair_round_robin_round(round_number: int):
        raise NotImplementedError()
